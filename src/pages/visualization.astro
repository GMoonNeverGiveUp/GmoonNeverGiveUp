---
import Layout from '../layouts/Layout.astro';
---
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Contest Dashboard</title>
    <style>
      .dashboard-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
      }
      h2 {
        color: var(--primary-color);
      }
      .meme-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1.5rem;
      }
      .meme-card {
        background: #23262d;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        transition: transform 0.3s;
      }
      .meme-card:hover {
        transform: translateY(-5px);
      }
      .meme-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
      }
      .meme-content {
        padding: 1rem;
        color: var(--text-color);
      }
      .meme-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 1rem;
      }
      .action-btn {
        background: var(--primary-color);
        border: none;
        border-radius: 4px;
        padding: 0.5rem;
        color: #fff;
        cursor: pointer;
        font-size: 0.9rem;
      }
    </style>
  </head>
  <body>
    <Layout>
      <div class="dashboard-container">
        <h2>Contest Dashboard</h2>
        <p>Explore the latest Galactic memes and interact with them.</p>
        <div class="meme-grid" id="memeGrid">
          <!-- Meme cards will be dynamically inserted here -->
        </div>
      </div>

      <script type="module">
        import { ethers } from "https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.esm.min.js";

        // Update these with your deployed contract details and RPC endpoint.
        const memeContestAddress = "0xYourMemeContestContractAddress";
        const memeContestABI = [
          "function currentTokenId() view returns (uint256)",
          "function memes(uint256) view returns (uint256 tokenId, address creator, string memeURI, uint256 voteCount, bool minted, bool submitted)"
        ];
        const rpcEndpoint = "https://your.rpc.endpoint";

        const memeGrid = document.getElementById("memeGrid");

        async function loadMemes() {
          const provider = new ethers.providers.JsonRpcProvider(rpcEndpoint);
          const contract = new ethers.Contract(memeContestAddress, memeContestABI, provider);

          try {
            const currentTokenId = await contract.currentTokenId();
            for (let i = 1; i <= currentTokenId; i++) {
              const meme = await contract.memes(i);
              // Create meme card element
              const card = document.createElement("div");
              card.className = "meme-card";

              // Meme image element
              const img = document.createElement("img");
              img.src = meme.memeURI || "https://via.placeholder.com/400x200?text=Meme+Coming+Soon";
              img.alt = `Meme ${meme.tokenId}`;
              img.className = "meme-image";
              card.appendChild(img);

              // Meme content
              const content = document.createElement("div");
              content.className = "meme-content";
              const creatorP = document.createElement("p");
              creatorP.textContent = `Creator: ${meme.creator}`;
              const votesP = document.createElement("p");
              votesP.textContent = `Votes: ${meme.voteCount.toString()}`;
              content.appendChild(creatorP);
              content.appendChild(votesP);
              card.appendChild(content);

              // Dummy meme actions
              const actions = document.createElement("div");
              actions.className = "meme-actions";
              
              const likeBtn = document.createElement("button");
              likeBtn.className = "action-btn";
              likeBtn.textContent = "Like";
              likeBtn.onclick = () => alert("Liked!");
              actions.appendChild(likeBtn);
              
              const commentBtn = document.createElement("button");
              commentBtn.className = "action-btn";
              commentBtn.textContent = "Comment";
              commentBtn.onclick = () => alert("Comment feature coming soon!");
              actions.appendChild(commentBtn);
              
              const shareBtn = document.createElement("button");
              shareBtn.className = "action-btn";
              shareBtn.textContent = "Share";
              shareBtn.onclick = () => alert("Share feature coming soon!");
              actions.appendChild(shareBtn);

              card.appendChild(actions);
              memeGrid.appendChild(card);
            }
          } catch (error) {
            console.error("Error loading memes:", error);
          }
        }

        loadMemes();
      </script>
    </Layout>
  </body>
</html>
