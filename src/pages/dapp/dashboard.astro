---
import jwt from 'jsonwebtoken';
import MemeCreator from "../../components/MemeCreator.jsx";
// Import BrowserProvider and Contract from ethers v6:
import { BrowserProvider, Contract, parseEther } from "ethers";
// Update the artifact import path according to your build output:
import MemeContestArtifact from "../../../build/contracts/MemeContest.json";

interface MyUserPayload extends jwt.JwtPayload {
  username: string;
  discordId: string;
}

const token = Astro.cookies.get('token')?.value;
if (!token) return Astro.redirect('/login');
let user: MyUserPayload;
try {
  user = jwt.verify(token, import.meta.env.JWT_SECRET) as MyUserPayload;
} catch (err) {
  console.error('JWT verification failed:', err);
  return Astro.redirect('/login');
}
const currentUser = user;

const NGU_TOKEN_ADDRESS = "0xc1aa125280bd8dc4d747fa2170255369c3075976";
const MEME_CONTEST_ADDRESS = import.meta.env.MEME_CONTEST_ADDRESS;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Meme Contest Dashboard</title>
    <style>
      .meme-section { margin: 20px; }
      .meme-card { border: 1px solid #ccc; padding: 10px; margin: 10px; }
      button { padding: 10px; margin: 5px; }
    </style>
  </head>
  <body>
    <header>
      <h1>Welcome, {currentUser.username}!</h1>
      <p>Your Discord ID: {currentUser.discordId}</p>
      <button id="connectWallet">Connect Wallet</button>
      <div id="walletStatus">Wallet not connected</div>
    </header>

    <section class="meme-section">
      <MemeCreator client:load onMemeGenerated={async (ipfsHash: string) => {
        const walletStatus = document.getElementById("walletStatus");
        if (!walletStatus || walletStatus.textContent === "Wallet not connected") {
          alert("Please connect your wallet first.");
          return;
        }
        // Use BrowserProvider for ethers v6:
        const provider = new BrowserProvider(window.ethereum || window.walletConnectProvider);
        const signer = await provider.getSigner();
        const contract = new Contract(MEME_CONTEST_ADDRESS, MemeContestArtifact.abi, signer);
        const tx = await contract.submitMeme(ipfsHash);
        await tx.wait();
        alert("Meme submitted successfully!");
      }} />
      <button id="mintButton">Mint Selected Meme</button>
    </section>

    <section class="meme-section">
      <h2>Your Memes in Contest</h2>
      <p>View, vote, or mint your memes (fees in NGU):</p>
      <div id="memeGrid"></div>
    </section>

    <!-- Updated inline script with is:inline -->
    <script type="module" is:inline>
      import { BrowserProvider, Contract, parseEther } from "ethers";
      import { EthereumProvider } from "@walletconnect/ethereum-provider";

      const ERC20_ABI = [
        "function transfer(address to, uint256 value) external returns (bool)",
        "function approve(address spender, uint256 value) external returns (bool)"
      ];
      let provider, signer;
      const walletConnectProvider = await EthereumProvider.init({
        projectId: "YOUR_WALLET_CONNECT_PROJECT_ID",
        chains: [1625],
        rpcMap: { 1625: "https://rpc.gravity.xyz" },
        showQrModal: true
      });
      window.walletConnectProvider = walletConnectProvider;

      document.getElementById("connectWallet").addEventListener("click", async () => {
        try {
          await walletConnectProvider.connect();
          provider = new BrowserProvider(walletConnectProvider);
          signer = await provider.getSigner();
          const address = await signer.getAddress();
          document.getElementById("walletStatus").textContent = `Wallet connected: ${address.slice(0, 6)}...${address.slice(-4)}`;
          loadMemes();
        } catch (error) {
          console.error("Wallet connection failed:", error);
          alert("Failed to connect wallet");
        }
      });

      async function loadMemes() {
        if (!signer) {
          alert("Please connect your wallet first.");
          return;
        }
        const contract = new Contract(MEME_CONTEST_ADDRESS, MemeContestArtifact.abi, signer);
        const address = await signer.getAddress();
        const currentTokenId = Number(await contract.currentTokenId());
        const grid = document.getElementById("memeGrid");
        grid.innerHTML = "";
        for (let i = 1; i <= currentTokenId; i++) {
          const meme = await contract.memes(i);
          if (meme.creator.toLowerCase() === address.toLowerCase()) {
            const card = document.createElement("div");
            card.className = "meme-card";
            card.innerHTML = `
              <img src="${meme.memeURI}" alt="Meme" style="max-width: 100%; border-radius: 5px;" />
              <h3>Meme #${meme.tokenId}</h3>
              <p>Votes: ${meme.voteCount.toString()}</p>
              <button class="vote-btn" data-id="${meme.tokenId}">Vote</button>
            `;
            grid.appendChild(card);
          }
        }
        document.querySelectorAll(".vote-btn").forEach(btn => {
          btn.addEventListener("click", async () => {
            const tokenId = btn.dataset.id;
            const nguContract = new Contract(NGU_TOKEN_ADDRESS, ERC20_ABI, signer);
            const contestContract = new Contract(MEME_CONTEST_ADDRESS, MemeContestArtifact.abi, signer);
            await nguContract.approve(MEME_CONTEST_ADDRESS, parseEther("1"));
            const tx = await contestContract.voteMeme(tokenId);
            await tx.wait();
            alert("Vote submitted successfully!");
            loadMemes();
          });
        });
      }
    </script>
  </body>
</html>
