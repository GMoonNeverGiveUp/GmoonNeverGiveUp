---
import jwt from 'jsonwebtoken';

interface MyUserPayload extends jwt.JwtPayload {
  username: string;
  discordId: string;
}

const cookieHeader = Astro.request.headers.get('cookie') || '';
const cookies = Object.fromEntries(
  cookieHeader.split(';').map(c => {
    const [key, ...v] = c.trim().split('=');
    return [key, v.join('=')];
  })
);

const token = cookies.token;
let user: MyUserPayload | null = null;

if (token) {
  try {
    user = jwt.verify(token, import.meta.env.JWT_SECRET || 'your-very-secret-key') as MyUserPayload;
  } catch (err) {
    console.error('Invalid JWT:', err);
    Astro.redirect('/auth/spectator');
  }
} else {
  Astro.redirect('/auth/spectator');
}

if (!user) {
  Astro.redirect('/auth/spectator');
}

const currentUser = user!;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Spectator Dashboard - NGU Meme dApp</title>
    <style>
      body {
        margin: 0;
        padding: 0;
        background: #0a0a0f;
        color: #e0e0e0;
        font-family: 'Montserrat', sans-serif;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 2rem;
      }
      header {
        text-align: center;
        margin-bottom: 2rem;
      }
      h1 {
        font-size: 2.5rem;
        margin-bottom: 0.5rem;
      }
      .meme-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1rem;
        width: 100%;
        max-width: 1200px;
      }
      .meme-card {
        background: #23262d;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        transition: transform 0.3s;
      }
      .meme-card:hover {
        transform: translateY(-5px);
      }
      .meme-card img {
        width: 100%;
        border-radius: 4px;
      }
      .actions {
        margin-top: 0.5rem;
        display: flex;
        gap: 0.5rem;
      }
      .actions button {
        flex: 1;
        padding: 0.5rem;
        background: #1e90ff;
        border: none;
        border-radius: 4px;
        color: #fff;
        cursor: pointer;
        transition: background 0.3s;
      }
      .actions button:hover {
        background: #1590e0;
      }
    </style>
  </head>
  <body>
    <header>
      <h1>Welcome, {currentUser.username}!</h1>
      <p>Your Discord ID: {currentUser.discordId}</p>
    </header>
    <section>
      <h2>Meme NFTs</h2>
      <div id="memeGrid" class="meme-grid">
        <!-- Meme cards will be dynamically inserted here -->
      </div>
    </section>
    <script type="module">
      import { ethers } from "ethers";
      
      // Request user's Ethereum accounts
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      await provider.send("eth_requestAccounts", []);
      
      // Instantiate the contract using its address and ABI
      // Ensure that your build process injects the correct ABI JSON string here
      const contract = new ethers.Contract(
        import.meta.env.MEME_CONTEST_ADDRESS,
        JSON.parse('<%- JSON.stringify(MemeContestArtifact.abi) %>'),
        provider
      );

      async function loadMemes() {
        try {
          const tokenId = await contract.currentTokenId();
          const grid = document.getElementById('memeGrid');
          grid.innerHTML = '';
          for (let i = 1; i <= tokenId; i++) {
            const meme = await contract.memes(i);
            const card = document.createElement('div');
            card.className = 'meme-card';
            card.innerHTML = `
              <img src="${meme.memeURI}" alt="Meme" />
              <h3>Meme #${meme.tokenId}</h3>
              <p>Votes: ${meme.voteCount}</p>
              <div class="actions">
                <button onclick="likeMeme('${meme.tokenId}')">Like</button>
                <button onclick="commentMeme('${meme.tokenId}')">Comment</button>
                <button onclick="shareMeme('${meme.tokenId}')">Share</button>
              </div>
            `;
            grid.appendChild(card);
          }
        } catch (error) {
          console.error('Error loading memes:', error);
        }
      }
      loadMemes();

      // Interactive functions â€“ these can later be expanded to interact with your back-end or smart contract
      window.likeMeme = (id) => {
        alert('Liked meme ' + id);
        // TODO: Call API or contract function to record like
      };

      window.commentMeme = (id) => {
        const comment = prompt("Enter your comment:");
        if (comment) {
          alert('Comment on meme ' + id + ': ' + comment);
          // TODO: Show comment input and handle submission (via API/contract)
        }
      };

      window.shareMeme = (id) => {
        alert('Shared meme ' + id);
        // TODO: Implement share functionality
      };
    </script>
  </body>
</html>
